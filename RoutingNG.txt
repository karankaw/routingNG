https://www.youtube.com/watch?v=Nehk4tBxD4o
-----------------------------------------------------------
ng new routing-demo
-----------------------------------------------------------
ng generate --help
Available Schematics:
  Collection "@schematics/angular" (default):
    app-shell
    application
    class
    component
    directive
    enum
    guard
    interceptor
    interface
    library
    module
    pipe
    resolver
    service
    service-worker
    web-worker
-----------------------------------------------------------
https://stackoverflow.com/questions/41354755/what-is-the-best-way-to-delete-a-component-with-cli
To remove component do it manually
-----------------------------------------------------------
Add component to angular
It creates html, ts, css, spec.ts, app.module.ts (Root App)
INDCORP+703250313@BMBW738Y2 MINGW64 /c/IEF/routingNG/routing-demo (develop)
$ ng generate component foo
CREATE src/app/foo/foo.component.html (18 bytes)
CREATE src/app/foo/foo.component.spec.ts (605 bytes)
CREATE src/app/foo/foo.component.ts (263 bytes)
CREATE src/app/foo/foo.component.css (0 bytes)
UPDATE src/app/app.module.ts (384 bytes)
-----------------------------------------------------------
https://www.w3schools.com/tags/tag_base.asp
The <base> tag specifies the base URL and/or target for all relative URLs in a document.
<head>
<base href="">
</head>
-----------------------------------------------------------
How to add routing module in new Angular proj
ng new NewAppName --routing
-----------------------------------------------------------
https://roytuts.com/how-to-add-routes-to-existing-angular-project/
Sometimes we don't know whether we want to add routing yet, so we say no. 
What do we do, though, if we decide to add routing later? 
	
-----------------------------------------------------------
src/app/
app.component.ts
                            .html
							.css
							.spec.ts
app.module.ts

app-routing.module.ts
-----------------------------------------------------------
https://angular.io/cli/generate#module-command
module
ng generate module <name> [options]
ng g module <name> [options]
Creates a new generic NgModule definition in the given or default project.

--module	
The declaring NgModule.
Aliases: -m
--module=app tells the CLI to register it in the imports array of the AppModule.

--routing	
Create a routing module within new module as well.

-----------------------------------------------------------
ng generate module app-routing
It creates a new module  in separate folder
-----------------------------------------------------------
ng generate module app-routing --flat
It creates a new module  in existing project 
-----------------------------------------------------------
$ ng generate module app-routing --flat --module=app
CREATE src/app/app-routing.module.ts (196 bytes)
UPDATE src/app/app.module.ts (410 bytes)
-----------------------------------------------------------
ng add vs npm install
https://stackoverflow.com/questions/50169680/difference-between-ng-add-package-name-vs-npm-install-package-name-in-angula/50169764#50169764

ng add - does npm install and adds scripts[] in angular.json
ng add
Will use your package manager to download new dependencies and invoke an installation script which can update your project with configuration changes (In angular.json file as well), add additional dependencies (e.g. polyfills if needed), or scaffold package-specific initialization code.

For example you run the command ng add @angular/material — Install, it will automatically install the package and configure in angular.json file too.
npm install
Whereas npm install <package> will only install your package into your project but will not configure in order to use.

For example you run the command npm install jquery it will install jQuery in your project but you need to configure manually in .angular-cli.json file (as in v5)
For more information read out here -

https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4
-----------------------------------------------------------
In Angular 6 + , angular-cli.json became angular.json
-----------------------------------------------------------
https://www.tutorialspoint.com/angular4/angular4_module.htm#:~:text=Module%20in%20Angular%20refers%20to,become%20part%20of%20a%20module.

The NgModule needs to be imported as follows −

import { NgModule } from '@angular/core';
The structure for the ngmodule is as shown below −

@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
It starts with @NgModule and contains an object which has declarations, import s, providers and bootstrap.

Declaration
It is an array of components created. If any new component gets created, it will be imported first and the reference will be included in declarations as shown below −

declarations: [
   AppComponent,
   NewCmpComponent
]
Import
It is an array of modules required to be used in the application. It can also be used by the components in the Declaration array. For example, right now in the @NgModule we see the Browser Module imported. In case your application needs forms, you can include the module as follows −

import { FormsModule } from '@angular/forms';
The import in the @NgModule will be like the following −

imports: [
   BrowserModule,
   FormsModule
]
Providers
This will include the services created.

Bootstrap
This includes the main app component for starting the execution.
-----------------------------------------------------------
app-routing.module.ts   -----> class AppRoutingModule
app.module.ts      --------------> class AppModule
---------------------------------------------------------
import { NgModule } from "@angular/core";
import { Routes, RouterModule } from "@angular/router";

@NgModule({
  declarations: [],
  imports: [],
  providers: [],
  bootstrap: []
})
export class AppRoutingModule {

}

---------------------------------------------------------
ts file have many classes, consts, Lets etc some of them which have export Qualifier
---------------------------------------------------------
import { NgModule } from "@angular/core";
import { Routes, RouterModule } from "@angular/router";

const routes: Routes = []

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}
---------------------------------------------------------
ng g c employee-list -s -t
g alias for generate
c alias for component
-s alias for --inline-style
-t alias for --inline-template
---------------------------------------------------------
https://www.tutorialsteacher.com/typescript/typescript-any

export const routingComponents  : any [] = [EmployeeListComponent, DepartmentListComponent]

---------------------------------------------------------
<router-outlet></router-outlet>

In app.component.ts
Enter a directive 
<router-outlet></router-outlet>

Acts as a placeholder that Angular dynamically fills based on the current router state.
---------------------------------------------------------
nav Tag

https://www.w3schools.com/tags/tag_nav.asp

---------------------------------------------------------
https://stackoverflow.com/questions/58081360/anchor-href-vs-angular-routerlink/61588147#61588147
<a href="employees">Employees</a> | 
<a href="departments">Departments</a> |
<a routerLink="employees">EmployeesNG</a> | 
<a routerLink="departments">DepartmentsNG</a>
---------------------------------------------------------
Href is the basic attribute provided by Html to navigate through pages which reloads the page on click.

routerLink is the attribute provided by angular to navigate to different components without reloading the page.

Major difference between both is that href kills the state of the current page where routerLink doesnt lose the state of the page.

For Eg. if an input text box is present in the page, the routerLink will retains its value after navigation.The routerLink can be considered as the custom attribute of href in angular by overriding some of the features like Page reloading
------------------------------------------------------------